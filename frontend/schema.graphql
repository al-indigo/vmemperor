# This file was generated based on ".graphqlconfig" at Mon Feb 04 17:31:12 MSK 2019. Do not edit manually.

interface DiskImage {
  SR: GSR
  VMs: [GVM]
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
  virtualSize: Float!
}

interface GAclXenObject {
  access: [GAccessEntry]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

interface GXenObject {
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type BlockDevice {
  VDI: DiskImage
  attached: Boolean!
  bootable: Boolean!
  device: String!
  id: ID!
  mode: String!
  type: String!
}

type CreateVM {
  "Installation task ID"
  taskId: ID!
}

type GAccessEntry {
  access: [String]!
  userid: String!
}

type GISO implements DiskImage & GAclXenObject {
  SR: GSR
  VMs: [GVM]
  access: [GAccessEntry]!
  location: String!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
  virtualSize: Float!
}

type GNetwork implements GAclXenObject {
  VMs: [GVM]
  access: [GAccessEntry]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  otherConfig: JSONString
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type GPlaybook {
  "Playbook description"
  description: String
  "Playbook ID"
  id: ID!
  "Inventory file path"
  inventory: String
  "Playbook name"
  name: String!
  "Requirements for running this playbook"
  requires: PlaybookRequirements
  "Variables available for change to an user"
  variables: JSONString
}

type GSR implements GXenObject {
  PBDs: [ID]
  VDIs: [DiskImage]
  contentType: String!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type GTask implements GAclXenObject {
  access: [GAccessEntry]!
  "Task creation time"
  created: DateTime!
  "Error strings, if failed"
  errorInfo: [String]
  "Task finish time"
  finished: DateTime!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Task progress"
  progress: Float!
  "Unique constant identifier/object reference"
  ref: ID!
  "ref of a host that runs this task"
  residentOn: ID
  "Task result if available"
  result: ID
  "Task status"
  status: String
  "Task result type"
  type: String
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type GTemplate implements GAclXenObject {
  access: [GAccessEntry]!
  "True if this template is available for regular users"
  enabled: Boolean!
  "True if this template works with hardware assisted virtualization"
  hvm: Boolean!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "If a template supports auto-installation, here a distro name is provided"
  osKind: String
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type GVDI implements DiskImage & GAclXenObject {
  SR: GSR
  VMs: [GVM]
  access: [GAccessEntry]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
  virtualSize: Float!
}

type GVM implements GAclXenObject {
  "True if PV drivers are up to date, reported if Guest Additions are installed"
  PVDriversUpToDate: Boolean
  "PV drivers version, if available"
  PVDriversVersion: PvDriversVersion
  VCPUsAtStartup: Int!
  VCPUsMax: Int!
  access: [GAccessEntry]!
  disks: [BlockDevice]
  domainType: String!
  guestMetrics: ID!
  installTime: DateTime!
  "Network adapters connected to a VM"
  interfaces: [Interface]
  memoryActual: Int!
  memoryDynamicMax: Int!
  memoryDynamicMin: Int!
  memoryStaticMax: Int!
  memoryStaticMin: Int!
  metrics: ID!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  osVersion: OSVersion
  powerState: String!
  "Unique constant identifier/object reference"
  ref: ID!
  startTime: DateTime!
  "Unique session-dependent identifier/object reference"
  uuid: ID!
}

type GVMsSubscription {
  "Change type"
  changeType: Change!
  value: GVM!
}

type Interface {
  MAC: String!
  VIF: ID!
  attached: Boolean!
  id: ID!
  ip: String
  ipv6: String
  network: GNetwork!
  status: String
}

type Mutation {
  "Create a new VM"
  createVm(
    #Number of created virtual CPUs
    VCPUs: Int = 1,
    disks: [NewVDI],
    #Automatic installation parameters, the installation is done via internet. Only available when template.os_kind is not empty
    installParams: AutoInstall,
    #ISO image mounted if conf parameter is null
    iso: ID,
    #VM human-readable description
    nameDescription: String!,
    #VM human-readable name
    nameLabel: String!,
    #Network ID to connect to
    network: ID,
    #RAM size in megabytes
    ram: Float!,
    #Template ID
    template: ID!
  ): CreateVM
  "Launch an Ansible Playbook on specified VMs"
  playbookLaunch(
    #Playbook ID
    id: ID!,
    #JSON with key-value pairs representing Playbook variables changed by user
    variables: JSONString,
    #VM UUIDs to run Playbook on. Ignored if this is a Playbook with provided Inventory
    vms: [ID]
  ): PlaybookLaunchMutation
  "Edit template options"
  template(
    #Template to change
    template: TemplateInput
  ): TemplateMutation
  "Edit VM options"
  vm(
    #VM to change
    vm: VMInput!
  ): VMMutation
  "If VM is Running, pause VM. If Paused, unpause VM"
  vmPause(uuid: ID!): VMPauseMutation
  "Reboot VM"
  vmReboot(
    #Force reboot in a hard or clean way. Default: clean
    force: ShutdownForce,
    uuid: ID!
  ): VMRebootMutation
  "Shut down VM"
  vmShutdown(
    #Force shutdown in a hard or clean way
    force: ShutdownForce,
    uuid: ID!
  ): VMShutdownMutation
  "Start VM"
  vmStart(options: VMStartInput, uuid: ID!): VMStartMutation
}

"OS version reported by Xen tools"
type OSVersion {
  distro: String
  major: Int
  minor: Int
  name: String
  uname: String
}

type PlaybookLaunchMutation {
  "Playbook execution task ID"
  taskId: ID!
}

type PlaybookRequirements {
  "Minimal supported OS versions"
  osVersion: [OSVersion]!
}

type PlaybookTask {
  "Playbook task ID"
  id: ID!
  "Human-readable message: error description or return code"
  message: String!
  "Playbook ID"
  playbookId: ID!
  "Playbook running state"
  state: PlaybookTaskState!
}

type PlaybookTasksSubscription {
  "Change type"
  changeType: Change!
  value: PlaybookTask!
}

"Drivers version. We don't want any fancy resolver except for the thing that we know that it's a dict in VM document"
type PvDriversVersion {
  build: Int
  major: Int
  micro: Int
  minor: Int
}

type Query {
  "Information about a single ISO image"
  iso(uuid: ID): GVDI!
  "All ISO images available for user"
  isos: [GISO]!
  "Information about a single network"
  network(uuid: ID): GNetwork!
  "All Networks available to user"
  networks: [GNetwork]!
  "Information about Ansible-powered playbook"
  playbook(id: ID): GPlaybook!
  "List of Ansible-powered playbooks"
  playbooks: [GPlaybook]!
  "Information about a single storage repository"
  sr(uuid: ID): GSR!
  "All Storage repositories available to user"
  srs: [GSR]!
  "All templates"
  templates: [GTemplate]!
  "Information about a single virtual disk image (hard disk)"
  vdi(uuid: ID): GVDI!
  "All Virtual Disk Images (hard disks), available for user"
  vdis: [GVDI]!
  vm(uuid: ID): GVM!
  "All VMs available to user"
  vms: [GVM]!
}

"All subscriptions must return  Observable"
type Subscription {
  "Updates for a particular Playbook installation Task"
  playbookTask(id: ID): PlaybookTask!
  "Updates for all Playbook Tasks"
  playbookTasks: PlaybookTasksSubscription!
  "Updates for a particular XenServer Task"
  task(uuid: ID): GTask
  "Updates for a particular VM"
  vm(uuid: ID): GVM
  "Updates for all VMs"
  vms: GVMsSubscription!
}

type TemplateMutation {
  success: Boolean!
}

"This class represents synchronous mutations for VM, i.e. you can change name_label, name_description, etc."
type VMMutation {
  success: Boolean!
}

type VMPauseMutation {
  "Pause/unpause task ID"
  taskId: ID!
}

type VMRebootMutation {
  "Reboot task ID"
  taskId: ID!
}

type VMShutdownMutation {
  "Shutdown task ID"
  taskId: ID!
}

type VMStartMutation {
  "Start task ID"
  taskId: ID!
}

enum Change {
  Add
  Change
  Initial
  Remove
}

enum PlaybookTaskState {
  ConfigurationWarning
  Error
  Finished
  Preparing
  Running
  Unknown
}

enum ShutdownForce {
  CLEAN
  HARD
}

input AutoInstall {
  "User's full name"
  fullname: String
  "VM hostname"
  hostname: String!
  "Network installation URL"
  mirrorUrl: String
  "Partition scheme (TODO)"
  partition: String!
  "User and root password"
  password: String!
  "Static IP configuration, if needed"
  staticIpConfig: NetworkConfiguration
  "Name of the newly created user"
  username: String!
}

input NetworkConfiguration {
  dns0: String!
  dns1: String
  gateway: String!
  ip: String!
  netmask: String!
}

input NewVDI {
  "Storage repository to create disk on"
  SR: ID!
  "Disk size of a newly created disk in megabytes"
  size: Float!
}

input TemplateInput {
  "Should this template be enabled, i.e. used in VMEmperor by users"
  enabled: Boolean
  "Template ID"
  uuid: ID!
}

input VMInput {
  "VM domain type: 'pv', 'hvm', 'pv_in_pvh'"
  domainType: String
  "VM human-readable description"
  nameDescription: String
  "VM human-readable name"
  nameLabel: String
  "VM ID"
  uuid: ID!
}

input VMStartInput {
  "Should this VM be started forcibly"
  force: Boolean = false
  "Should this VM be started and immidiately paused"
  paused: Boolean = false
}

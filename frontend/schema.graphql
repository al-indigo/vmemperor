# This file was generated based on ".graphqlconfig" at Tue Apr 02 21:47:07 MSK 2019. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface GAbstractVM {
  VCPUsAtStartup: Int!
  VCPUsMax: Int!
  domainType: DomainType!
  guestMetrics: ID!
  installTime: DateTime!
  memoryActual: Float!
  memoryDynamicMax: Float!
  memoryDynamicMin: Float!
  memoryStaticMax: Float!
  memoryStaticMin: Float!
  "CPU platform parameters"
  platform: Platform
}

interface GAccessEntry {
  userId: User!
}

interface GAclXenObject {
  access: [GAccessEntry]!
  isOwner: Boolean!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

interface GXenObject {
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

union GHostOrDeleted = Deleted | GHost

union GNetworkOrDeleted = Deleted | GNetwork

union GPoolOrDeleted = Deleted | GPool

union GSROrDeleted = Deleted | GSR

union GTaskOrDeleted = Deleted | GTask

union GTemplateOrDeleted = Deleted | GTemplate

union GVDIOrDeleted = Deleted | GVDI

union GVMOrDeleted = Deleted | GVM

union PlaybookTaskOrDeleted = Deleted | PlaybookTask

type AttachNetworkMutation {
  granted: Boolean!
  reason: String
  "Attach/Detach task ID. If already attached/detached, returns null"
  taskId: ID
}

type AttachVDIMutation {
  "Returns True if access is granted"
  granted: Boolean!
  "If access is not granted, return the reason"
  reason: String
  "Attach/Detach task ID. If already attached/detached, returns null"
  taskId: ID
}

type CpuInfo {
  cpuCount: Int!
  family: Int!
  features: ID!
  featuresHvm: ID
  featuresPv: ID
  flags: String!
  model: Int!
  modelname: String!
  socketCount: Int!
  speed: Float!
  stepping: Int!
  vendor: String!
}

type CreateVM {
  granted: Boolean!
  reason: String
  "Installation task ID"
  taskId: ID
}

type CurrentUserInformation {
  groups: [User]
  isAdmin: Boolean!
  user: User
}

type Deleted {
  "Deleted object's ref"
  ref: ID!
}

type GHost implements GXenObject {
  "Major XenAPI version number"
  APIVersionMajor: Int
  "Minor XenAPI version number"
  APIVersionMinor: Int
  "Connections to storage repositories"
  PBDs: [GPBD]!
  PCIs: [ID]!
  PGPUs: [ID]!
  PIFs: [ID]!
  PUSBs: [ID]!
  "The address by which this host can be contacted from any other host in the pool"
  address: String!
  allowedOperations: [HostAllowedOperations]!
  cpuInfo: CpuInfo!
  display: HostDisplay!
  hostname: String!
  "True if host is up. May be null if no data"
  live: Boolean
  "When live status was last updated"
  liveUpdated: DateTime
  "Available memory as measured by the host in kilobytes"
  memoryAvailable: Float
  "Free memory in kilobytes"
  memoryFree: Float
  "Virtualization overhead in kilobytes"
  memoryOverhead: Float
  "Total memory in kilobytes"
  memoryTotal: Float
  metrics: ID!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "VMs currently resident on host"
  residentVms: [GVM]!
  softwareVersion: SoftwareVersion!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GHostsSubscription {
  "Change type"
  changeType: Change!
  value: GHostOrDeleted!
}

type GNetwork implements GAclXenObject {
  VIFs: [GVIF]
  access: [GNetworkAccessEntry]!
  isOwner: Boolean!
  myActions: [NetworkActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  otherConfig: JSONString
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GNetworkAccessEntry implements GAccessEntry {
  actions: [NetworkActions!]!
  userId: User!
}

type GNetworksSubscription {
  "Change type"
  changeType: Change!
  value: GNetworkOrDeleted!
}

"""
Fancy name for a PBD. Not a real Xen object, though a connection
between a host and a SR
"""
type GPBD {
  SR: GSR!
  currentlyAttached: Boolean!
  deviceConfig: JSONString!
  "Host to which the SR is supposed to be connected to"
  host: GHost!
  "Unique constant identifier/object reference"
  ref: ID!
  "Unique non-primary identifier/object reference"
  uuid: ID!
}

type GPlaybook {
  "Playbook description"
  description: String
  "Playbook ID"
  id: ID!
  "Inventory file path"
  inventory: String
  "Playbook name"
  name: String!
  "Requirements for running this playbook"
  requires: PlaybookRequirements
  "Variables available for change to an user"
  variables: JSONString
}

type GPool implements GXenObject {
  "Default SR"
  defaultSr: GSR
  "Pool master"
  master: GHost
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GPoolsSubscription {
  "Change type"
  changeType: Change!
  value: GPoolOrDeleted!
}

type GSR implements GAclXenObject {
  "Connections to host. Usually one, unless the storage repository is shared: e.g. iSCSI"
  PBDs: [GPBD]!
  VDIs: [GVDI]
  access: [GSRAccessEntry]!
  contentType: SRContentType!
  isOwner: Boolean!
  "This SR contains XenServer Tools"
  isToolsSr: Boolean!
  myActions: [SRActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Physical size in kilobytes"
  physicalSize: Float!
  "Physical utilisation in bytes"
  physicalUtilisation: Float!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Available space in bytes"
  spaceAvailable: Float!
  type: String!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
  "Virtual allocation in kilobytes"
  virtualAllocation: Float!
}

type GSRAccessEntry implements GAccessEntry {
  actions: SRActions!
  userId: User!
}

type GSRsSubscription {
  "Change type"
  changeType: Change!
  value: GSROrDeleted!
}

type GTask implements GAclXenObject {
  access: [GTaskAccessEntry]!
  "Task creation time"
  created: DateTime!
  "Error strings, if failed"
  errorInfo: [String]
  "Task finish time"
  finished: DateTime!
  isOwner: Boolean!
  myActions: [TaskActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Task progress"
  progress: Float!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "ref of a host that runs this task"
  residentOn: ID
  "Task result if available"
  result: ID
  "Task status"
  status: String
  "Task result type"
  type: String
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GTaskAccessEntry implements GAccessEntry {
  actions: [TaskActions!]!
  userId: User!
}

type GTasksSubscription {
  "Change type"
  changeType: Change!
  value: GTaskOrDeleted!
}

type GTemplate implements GAbstractVM & GAclXenObject {
  VCPUsAtStartup: Int!
  VCPUsMax: Int!
  access: [GTemplateAccessEntry]!
  domainType: DomainType!
  guestMetrics: ID!
  "If the template supports unattended installation, its options are there"
  installOptions: InstallOSOptions
  installTime: DateTime!
  "This template is preinstalled with XenServer"
  isDefaultTemplate: Boolean!
  isOwner: Boolean!
  memoryActual: Float!
  memoryDynamicMax: Float!
  memoryDynamicMin: Float!
  memoryStaticMax: Float!
  memoryStaticMin: Float!
  myActions: [TemplateActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "CPU platform parameters"
  platform: Platform
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GTemplateAccessEntry implements GAccessEntry {
  actions: [TemplateActions!]!
  userId: User!
}

type GTemplatesSubscription {
  "Change type"
  changeType: Change!
  value: GTemplateOrDeleted!
}

type GVBD {
  VDI: GVDI
  VM: GVM
  bootable: Boolean!
  currentlyAttached: Boolean!
  mode: VBDMode!
  "Unique constant identifier/object reference"
  ref: ID!
  type: VBDType!
  userdevice: Int!
  "Unique non-primary identifier/object reference"
  uuid: ID!
}

type GVDI implements GAclXenObject {
  SR: GSR
  VBDs: [GVBD]!
  access: [GVDIAccessEntry]!
  contentType: SRContentType!
  isOwner: Boolean!
  myActions: [VDIActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  type: VDIType!
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
  virtualSize: Float!
}

type GVDIAccessEntry implements GAccessEntry {
  actions: [VDIActions!]!
  userId: User!
}

type GVDIsSubscription {
  "Change type"
  changeType: Change!
  value: GVDIOrDeleted!
}

type GVIF {
  "MAC address"
  MAC: ID!
  VM: GVM
  currentlyAttached: Boolean!
  "Device ID"
  device: ID!
  ip: String
  ipv4: String
  ipv6: String
  network: GNetwork
  "Unique constant identifier/object reference (primary)"
  ref: ID!
}

type GVM implements GAbstractVM & GAclXenObject {
  "True if PV drivers are up to date, reported if Guest Additions are installed"
  PVDriversUpToDate: Boolean
  "PV drivers version, if available"
  PVDriversVersion: PvDriversVersion
  "Virtual block devices"
  VBDs: [GVBD]!
  VCPUsAtStartup: Int!
  VCPUsMax: Int!
  VIFs: [GVIF]!
  access: [GVMAccessEntry]!
  domainType: DomainType!
  guestMetrics: ID!
  installTime: DateTime!
  isOwner: Boolean!
  memoryActual: Float!
  memoryDynamicMax: Float!
  memoryDynamicMin: Float!
  memoryStaticMax: Float!
  memoryStaticMin: Float!
  metrics: ID!
  myActions: [VMActions]!
  "a human-readable description"
  nameDescription: String!
  "a human-readable name"
  nameLabel: String!
  osVersion: OSVersion
  "CPU platform parameters"
  platform: Platform
  powerState: PowerState!
  "Unique constant identifier/object reference (primary)"
  ref: ID!
  startTime: DateTime
  "Unique constant identifier/object reference (used in XenCenter)"
  uuid: ID!
}

type GVMAccessEntry implements GAccessEntry {
  actions: [VMActions!]!
  userId: User!
}

type GVMsSubscription {
  "Change type"
  changeType: Change!
  value: GVMOrDeleted!
}

type InstallOSOptions {
  arch: Arch
  distro: Distro!
  installRepository: String
  release: String
}

type Mutation {
  "Create a new VM"
  createVm(
    disks: [NewVDI],
    #Automatic installation parameters, the installation is done via internet. Only available when template.os_kind is not empty
    installParams: AutoInstall,
    #ISO image mounted if conf parameter is null
    iso: ID,
    #Network ID to connect to
    network: ID,
    #Template ID
    template: ID!,
    #Basic VM options. Leave fields empty to use Template options
    vmOptions: VMInput!
  ): CreateVM
  "Set network access rights"
  netAccessSet(actions: [NetworkActions!]!, ref: ID!, revoke: Boolean!, user: String!): NetAccessSet
  "Attach VM to a Network by creating a new Interface"
  netAttach(
    #True if attach, False if detach
    isAttach: Boolean!,
    netRef: ID!,
    vmRef: ID!
  ): AttachNetworkMutation
  "Edit Network options"
  network(
    #Network to change
    network: NetworkInput!
  ): NetworkMutation
  "Launch an Ansible Playbook on specified VMs"
  playbookLaunch(
    #Playbook ID
    id: ID!,
    #JSON with key-value pairs representing Playbook variables changed by user
    variables: JSONString,
    #VM UUIDs to run Playbook on. Ignored if this is a Playbook with provided Inventory
    vms: [ID]
  ): PlaybookLaunchMutation
  "Edit SR options"
  sr(
    #Sr to change
    sr: SRInput!
  ): SRMutation
  "Set SR access rights"
  srAccessSet(actions: [SRActions!]!, ref: ID!, revoke: Boolean!, user: String!): SRAccessSet
  "Delete a SR"
  srDelete(ref: ID!): SRDestroyMutation
  "Edit template options"
  template(
    #Template to change
    template: TemplateInput!
  ): TemplateMutation
  "Set template access rights"
  templateAccessSet(actions: [TemplateActions!]!, ref: ID!, revoke: Boolean!, user: String!): TemplateAccessSet
  "Clone template"
  templateClone(
    #New name label
    nameLabel: String!,
    ref: ID!
  ): TemplateCloneMutation
  "Delete template"
  templateDelete(ref: ID!): TemplateDestroyMutation
  "Edit VDI options"
  vdi(
    #Vdi to change
    vdi: VDIInput!
  ): VDIMutation
  "Set VDI access rights"
  vdiAccessSet(actions: [VDIActions!]!, ref: ID!, revoke: Boolean!, user: String!): VDIAccessSet
  "Attach VDI to a VM by creating a new virtual block device"
  vdiAttach(
    #True if attach, False if detach
    isAttach: Boolean!,
    vdiRef: ID!,
    vmRef: ID!
  ): AttachVDIMutation
  "Delete a VDI"
  vdiDelete(ref: ID!): VDIDestroyMutation
  "Edit VM options"
  vm(
    #Vm to change
    vm: VMInput!
  ): VMMutation
  "Set VM access rights"
  vmAccessSet(actions: [VMActions!]!, ref: ID!, revoke: Boolean!, user: String!): VMAccessSet
  "Delete a Halted VM"
  vmDelete(ref: ID!): VMDestroyMutation
  "If VM is Running, pause VM. If Paused, unpause VM"
  vmPause(ref: ID!): VMPauseMutation
  "Reboot VM"
  vmReboot(
    #Force reboot in a hard or clean way. Default: clean
    force: ShutdownForce,
    ref: ID!
  ): VMRebootMutation
  "Shut down VM"
  vmShutdown(
    #Force shutdown in a hard or clean way
    force: ShutdownForce,
    ref: ID!
  ): VMShutdownMutation
  "Start VM"
  vmStart(options: VMStartInput, ref: ID!): VMStartMutation
  "If VM is Running, suspend VM. If Suspended, resume VM"
  vmSuspend(ref: ID!): VMSuspendMutation
}

type NetAccessSet {
  success: Boolean!
}

type NetworkMutation {
  granted: Boolean!
  reason: String
}

"OS version reported by Xen tools"
type OSVersion {
  distro: String
  major: Int
  minor: Int
  name: String
  uname: String
}

type Platform {
  acpi: Int
  apic: Boolean
  coresPerSocket: Int
  deviceModel: String
  hpet: Boolean
  nx: Boolean
  pae: Boolean
  timeoffset: Int
  videoram: Int
}

type PlaybookLaunchMutation {
  "Playbook execution task ID"
  taskId: ID!
}

type PlaybookRequirements {
  "Minimal supported OS versions"
  osVersion: [OSVersion]!
}

type PlaybookTask {
  "Playbook task ID"
  id: ID!
  "Human-readable message: error description or return code"
  message: String!
  "Playbook ID"
  playbookId: ID!
  "Playbook running state"
  state: PlaybookTaskState!
}

type PlaybookTasksSubscription {
  "Change type"
  changeType: Change!
  value: PlaybookTaskOrDeleted!
}

"Drivers version. We don't want any fancy resolver except for the thing that we know that it's a dict in VM document"
type PvDriversVersion {
  build: Int
  major: Int
  micro: Int
  minor: Int
}

type Query {
  "One-time link to RFB console for a VM"
  console(vmRef: ID!): String
  "current user or group information"
  currentUser: CurrentUserInformation
  findUser(query: String!): [User]!
  "All registered groups"
  groups: [User]!
  host(ref: ID!): GHost
  hosts: [GHost]!
  "Information about a single network"
  network(ref: ID!): GNetwork
  "All Networks available to user"
  networks: [GNetwork]!
  "Information about Ansible-powered playbook"
  playbook(id: ID): GPlaybook
  "Info about a playbook task"
  playbookTask(id: ID!): PlaybookTask
  "All Playbook Tasks"
  playbookTasks: [PlaybookTask]!
  "List of Ansible-powered playbooks"
  playbooks: [GPlaybook]!
  pool(ref: ID!): GPool
  pools: [GPool]!
  "Information about a single storage repository"
  sr(ref: ID!): GSR
  "All Storage repositories available to user"
  srs: [GSR]!
  template(ref: ID!): GTemplate
  "All Templates available to user"
  templates: [GTemplate]!
  "User or group information"
  user(id: ID): User
  "All registered users (excluding root)"
  users: [User]!
  "Information about a single virtual disk image (hard disk)"
  vdi(ref: ID!): GVDI
  "All Virtual Disk Images (hard disks), available for user"
  vdis(
    #True - print only ISO images; False - print everything but ISO images; null - print everything
    onlyIsos: Boolean
  ): [GVDI]!
  vm(ref: ID!): GVM
  "All VMs available to user"
  vms: [GVM]!
}

type SRAccessSet {
  success: Boolean!
}

type SRDestroyMutation {
  "Shows if access to destroy is granted"
  granted: Boolean!
  reason: String
  "destroy task ID"
  taskId: ID
}

type SRMutation {
  granted: Boolean!
  reason: String
}

type SoftwareVersion {
  buildNumber: String!
  date: String!
  hostname: String!
  "Linux kernel version"
  linux: String!
  networkBackend: String!
  platformName: String!
  platformVersion: String!
  platformVersionText: String!
  platformVersionTextShort: String!
  productBrand: String!
  productVersion: String!
  productVersionText: String!
  "XAPI version"
  xapi: String!
  "Xen version"
  xen: String!
}

"All subscriptions must return  Observable"
type Subscription {
  "Updates for a particular Host"
  host(ref: ID!): GHost
  "Updates for all Hosts"
  hosts(withInitials: Boolean): GHostsSubscription!
  "Updates for a particular Network"
  network(ref: ID!): GNetwork
  "Updates for all Networks"
  networks(withInitials: Boolean): GNetworksSubscription!
  "Updates for a particular Playbook installation Task"
  playbookTask(id: ID!): PlaybookTask
  "Updates for all Playbook Tasks"
  playbookTasks(withInitials: Boolean): PlaybookTasksSubscription!
  "Updates for a particular Pool"
  pool(ref: ID!): GPool
  "Updates for all pools available in VMEmperor"
  pools(withInitials: Boolean): GPoolsSubscription!
  "Updates for a particular Storage Repository"
  sr(ref: ID!): GSR
  "Updates for all Storage Repositories"
  srs(withInitials: Boolean): GSRsSubscription!
  "Updates for a particular XenServer Task"
  task(ref: ID!): GTask
  "Updates for all XenServer tasks"
  tasks(withInitials: Boolean): GTasksSubscription!
  "Updates for a particular Template"
  template(ref: ID!): GTemplate
  "Updates for all Templates"
  templates(withInitials: Boolean): GTemplatesSubscription!
  "Updates for a particular VDI"
  vdi(ref: ID!): GVDI
  "Updates for all VDIs"
  vdis(
    #True - print only ISO images; False - print everything but ISO images; null - print everything
    onlyIsos: Boolean,
    withInitials: Boolean
  ): GVDIsSubscription!
  "Updates for a particular VM"
  vm(ref: ID!): GVM
  "Updates for all VMs"
  vms(withInitials: Boolean): GVMsSubscription!
}

type TemplateAccessSet {
  success: Boolean!
}

type TemplateCloneMutation {
  "Shows if access to clone is granted"
  granted: Boolean!
  reason: String
  "clone task ID"
  taskId: ID
}

type TemplateDestroyMutation {
  "Shows if access to destroy is granted"
  granted: Boolean!
  reason: String
  "destroy task ID"
  taskId: ID
}

type TemplateMutation {
  granted: Boolean!
  reason: String
}

type User {
  id: ID!
  name: String!
  username: String!
}

type VDIAccessSet {
  success: Boolean!
}

type VDIDestroyMutation {
  "Shows if access to destroy is granted"
  granted: Boolean!
  reason: String
  "destroy task ID"
  taskId: ID
}

type VDIMutation {
  granted: Boolean!
  reason: String
}

type VMAccessSet {
  success: Boolean!
}

type VMDestroyMutation {
  "Shows if access to delete is granted"
  granted: Boolean!
  reason: String
  "Deleting task ID"
  taskId: ID
}

type VMMutation {
  granted: Boolean!
  reason: String
}

type VMPauseMutation {
  "Shows if access to pause/unpause is granted"
  granted: Boolean!
  reason: String
  "Pause/unpause task ID"
  taskId: ID
}

type VMRebootMutation {
  "Shows if access to reboot is granted"
  granted: Boolean!
  "Reboot task ID"
  taskId: ID
}

type VMShutdownMutation {
  "Shows if access to shutdown is granted"
  granted: Boolean!
  "Shutdown task ID"
  taskId: ID
}

type VMStartMutation {
  "Shows if access to start is granted"
  granted: Boolean!
  reason: String
  "Start task ID"
  taskId: ID
}

type VMSuspendMutation {
  "Shows if access to suspend/resume is granted"
  granted: Boolean!
  reason: String
  "Suspend/resume task ID"
  taskId: ID
}

"An enumeration."
enum Arch {
  I386
  X86_64
}

enum Change {
  Add
  Change
  Initial
  Remove
}

"An enumeration."
enum Distro {
  CentOS
  Debian
  SUSE
}

"An enumeration."
enum DomainType {
  HVM
  PV
  PV_in_PVH
}

enum HostAllowedOperations {
  #Indicates this host is evacuating
  Evacuate
  #Indicates this host is in the process of being powered on
  PowerOn
  #Indicates this host is able to provision another VM
  Provision
  #Indicates this host is in the process of rebooting
  Reboot
  #Indicates this host is in the process of shutting itself down
  Shutdown
  #This host is the migration target of a VM
  VmMigrate
  #This host is resuming a VM
  VmResume
  #This host is starting a VM
  VmStart
}

enum HostDisplay {
  #The host will stop outputting its console to a physical display device on next boot
  DisableOnReboot
  #This host is not outputting its console to a physical display device
  Disabled
  #The host will start outputting its console to a physical display device on next boot
  EnableOnReboot
  #This host is outputting its console to a physical display device
  Enabled
}

"An enumeration."
enum NetworkActions {
  ALL
  NONE
  attaching
  rename
}

enum PlaybookTaskState {
  ConfigurationWarning
  Error
  Finished
  Preparing
  Running
  Unknown
}

enum PowerState {
  Halted
  Paused
  Running
  Suspended
}

"An enumeration."
enum SRActions {
  ALL
  NONE
  destroy
  rename
  scan
  vdi_clone
  vdi_create
  vdi_introduce
}

enum SRContentType {
  Disk
  ISO
  User
}

enum ShutdownForce {
  CLEAN
  HARD
}

"An enumeration."
enum TaskActions {
  ALL
  NONE
  cancel
}

"An enumeration."
enum TemplateActions {
  ALL
  NONE
  change_install_os_options
  clone
  destroy
  rename
}

enum VBDMode {
  RO
  RW
}

enum VBDType {
  CD
  Disk
  Floppy
}

"An enumeration."
enum VDIActions {
  ALL
  NONE
  destroy
  plug
  rename
}

"VDI class supports only a subset of VDI types, that are listed below."
enum VDIType {
  Ephemeral
  System
  User
}

"An enumeration."
enum VMActions {
  ALL
  NONE
  VNC
  attach_network
  attach_vdi
  change_domain_type
  changing_VCPUs
  changing_memory_limits
  checkpoint
  clean_reboot
  clean_shutdown
  clone
  copy
  create_template
  csvm
  destroy
  hard_reboot
  hard_shutdown
  migrate_send
  pause
  pool_migrate
  power_state_reset
  rename
  resume
  resume_on
  revert
  shutdown
  snapshot
  snapshot_with_quiesce
  start
  start_on
  suspend
  unpause
}

input AutoInstall {
  "User's full name"
  fullname: String
  "VM hostname"
  hostname: String!
  "Network installation URL"
  mirrorUrl: String
  "Partition scheme (TODO)"
  partition: String!
  "User and root password"
  password: String!
  "Static IP configuration, if needed"
  staticIpConfig: NetworkConfiguration
  "Name of the newly created user"
  username: String!
}

input InstallOSOptionsInput {
  arch: Arch
  distro: Distro
  installRepository: String
  release: String
}

input NetworkConfiguration {
  dns0: String!
  dns1: String
  gateway: String!
  ip: String!
  netmask: String!
}

input NetworkInput {
  "Object's human-readable description"
  nameDescription: String
  "Object's human-readable name"
  nameLabel: String
  "Object's ref"
  ref: ID!
}

input NewVDI {
  "Storage repository to create disk on"
  SR: ID!
  "Disk size of a newly created disk in megabytes"
  size: Float!
}

input PlatformInput {
  acpi: Int
  apic: Boolean
  coresPerSocket: Int
  deviceModel: String
  hpet: Boolean
  nx: Boolean
  pae: Boolean
  timeoffset: Int
  videoram: Int
}

input SRInput {
  "Object's human-readable description"
  nameDescription: String
  "Object's human-readable name"
  nameLabel: String
  "Object's ref"
  ref: ID!
}

input TemplateInput {
  "Number of VCPUs at startup"
  VCPUsAtStartup: Int
  "Maximum number of VCPUs"
  VCPUsMax: Int
  "VM domain type: 'pv', 'hvm', 'pv_in_pvh'"
  domainType: DomainType
  installOptions: InstallOSOptionsInput
  "Dynamic memory max in bytes"
  memoryDynamicMax: Float
  "Dynamic memory min in bytes"
  memoryDynamicMin: Float
  "Static memory max in bytes"
  memoryStaticMax: Float
  "Static memory min in bytes"
  memoryStaticMin: Float
  "Object's human-readable description"
  nameDescription: String
  "Object's human-readable name"
  nameLabel: String
  "VCPU platform properties"
  platform: PlatformInput
  "Object's ref"
  ref: ID!
}

input VDIInput {
  "Object's human-readable description"
  nameDescription: String
  "Object's human-readable name"
  nameLabel: String
  "Object's ref"
  ref: ID!
}

input VMInput {
  "Number of VCPUs at startup"
  VCPUsAtStartup: Int
  "Maximum number of VCPUs"
  VCPUsMax: Int
  "VM domain type: 'pv', 'hvm', 'pv_in_pvh'"
  domainType: DomainType
  "Dynamic memory max in bytes"
  memoryDynamicMax: Float
  "Dynamic memory min in bytes"
  memoryDynamicMin: Float
  "Static memory max in bytes"
  memoryStaticMax: Float
  "Static memory min in bytes"
  memoryStaticMin: Float
  "Object's human-readable description"
  nameDescription: String
  "Object's human-readable name"
  nameLabel: String
  "VCPU platform properties"
  platform: PlatformInput
  "Object's ref"
  ref: ID!
}

input VMStartInput {
  "Should this VM be started forcibly"
  force: Boolean
  "Host to start VM on"
  host: ID
  "Should this VM be started and immidiately paused"
  paused: Boolean
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"JSON String"
scalar JSONString
